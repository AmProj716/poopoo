import socket
import subprocess
import nmap
from pysnmp.hlapi import *
from ldap3 import Server, Connection, ALL

def scan_ports(ip, ports):
    open_ports = []
    for port in ports:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(3)  # Increase connection timeout
            result = s.connect_ex((ip, port))
            if result == 0:  # Successfully connected
                print(f"Port {port} is open")
                open_ports.append(port)
            else:
                print(f"Port {port} is closed or filtered")
    return open_ports


def netbios_enumeration(ip):
    try:
        netbios_port = 137
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.settimeout(3)

        nb_name_query = b'\x00' * 48  # Query packet (you may need a valid query)
        s.sendto(nb_name_query, (ip, netbios_port))

        data, addr = s.recvfrom(1024)  # receive a response
        print(f"NetBIOS Information from {ip}: {data}")
    except Exception as e:
        print("No NetBIOS information found or unable to connect.")
    finally:
        s.close()


def snmp_enumeration(ip):
    community = "public"
    iterator = getCmd(SnmpEngine(),
                      CommunityData(community),
                      UdpTransportTarget((ip, 161)),
                      ContextData(),
                      ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0')))

    errorIndication, errorStatus, errorIndex, varBinds = next(iterator)

    if errorIndication:
        print(f"SNMP Error: {errorIndication}")
    elif errorStatus:
        print(f"SNMP Error: {errorStatus.prettyPrint()} at {errorIndex and varBinds[int(errorIndex) - 1] or '?'}")
    else:
        for varBind in varBinds:
            print(f"SNMP System Description: {varBind.prettyPrint()}")


def ldap_enumeration(ip):
    server = Server(ip, get_info=ALL)
    conn = Connection(server)

    if conn.bind():
        print(f"Connected to LDAP server: {ip}")
    else:
        print("Failed to connect to LDAP server.")


def ntp_enumeration(ip):
    command = f"ntpdate -q {ip}"
    try:
        output = subprocess.check_output(command, shell=True).decode()
        print(f"NTP Server Information: {output}")
    except Exception as e:
        print(f"Error querying NTP server: {e}")


def run_nmap_scan(target, port):
    # Create a new instance of the PortScanner class
    nm = nmap.PortScanner()

    print(f"Running Nmap scan on {target}...")

    try:
        # Scan the target for open ports
        nm.scan(target, '1-1024')  # Scanning ports 1 to 1024

        # Check if the target is up
        if target in nm.all_hosts():
            print(f"Host {target} is up.")

            # Iterate over all the scanned ports
            for proto in nm[target].all_protocols():
                ports = nm[target][proto].keys()
                for port in ports:
                    state = nm[target][proto][port]['state']
                    service = nm[target][proto][port]['name']
                    print(f"Port {port}: {state} - {service}")
        else:
            print(f"No information found for {target}.")

    except nmap.PortScannerError as e:
        print(f"Error running Nmap: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


def main(ip):
    common_ports = [139, 445, 161, 389, 123]  # NetBIOS, SNMP, LDAP, NTP
    open_ports = scan_ports(ip, common_ports)

    if open_ports:
        print(f"Open Ports: {open_ports}")

        if any(port in open_ports for port in [139, 445]):
            netbios_enumeration(ip)
        if 161 in open_ports:
            snmp_enumeration(ip)
        if 389 in open_ports:
            ldap_enumeration(ip)
        if 123 in open_ports:
            ntp_enumeration(ip)
    else:
        print("No open ports found.")
    nmap_output = run_nmap_scan(ip, open_ports)
    print(nmap_output)


if __name__ == "__main__":
    target_ip = input("Enter the target IP address: ")  # Replace with actual IP from Metaexploit2
    main(target_ip)
